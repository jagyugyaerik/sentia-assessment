# This is a basic workflow to help you get started with Actions

name: CICD

# Controls when the action will run. 
on:
  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:

# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
  # This workflow contains a single job called "build"
  build-and-deploy:
    # The type of runner that the job will run on
    runs-on: ubuntu-latest
    env:
      LOCATION: westeurope
      RESOURCE_GROUP: testEjaSentia
      AKS_CLUSTER_NAME: testEjaSentia
      ACTIONS_ALLOW_UNSECURE_COMMANDS: 'true'
      IP_ADDRESS_RESOURCE_NAME: testPublicIp

    # Steps represent a sequence of tasks that will be executed as part of the job
    steps:
      # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
      - uses: actions/checkout@v2

      - name: debug
        run: |
          ls -la ./arm_templates/azuredeploy.json

      - name: Azure Login
        uses: azure/login@v1
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}

      # - name: Create resource group
      #   uses: azure/CLI@v1
      #   with:
      #     azcliversion: 2.0.72
      #     inlineScript: |
      #       az group create --name ${{ env.RESOURCE_GROUP }} --location ${{ env.LOCATION }}
      
      # - uses: azure/arm-deploy@v1
      #   with:
      #     subscriptionId: ${{ secrets.AZURE_SUBSCRIPTION }}
      #     resourceGroupName: ${{ env.RESOURCE_GROUP }}
      #     template: ./arm_templates/azuredeploy.json
      #     parameters: environment=test kubeClusterName=${{ env.AKS_CLUSTER_NAME }} testejaSentiaexistingServicePrincipalClientId=4b6c8589-dc81-4229-af9b-cb031124e212 existingServicePrincipalClientSecret=${{ secrets.AKS_SP_SECRET }}

      - name: Prepare ingress controller deployment
        uses: azure/CLI@v1
        with:
          azcliversion: 2.0.72
          inlineScript: |
            az network public-ip create --resource-group MC_${{ env.RESOURCE_GROUP }}_${{ env.AKS_CLUSTER_NAME }}_${{ env.LOCATION }} --name ${{ env.IP_ADDRESS_RESOURCE_NAME }} --sku Standard --allocation-method static
            echo "PUBLIC_IP_ADDRESS=$(az network public-ip show --name ${{ env.IP_ADDRESS_RESOURCE_NAME }} --resource-group MC_${{ env.RESOURCE_GROUP }}_${{ env.AKS_CLUSTER_NAME }}_${{ env.LOCATION }} --query ipAddress) -o tsv" >> $GITHUB_ENV
            echo "KUBE_CONFIG_DATA=$(az aks get-credentials --name ${{ env.AKS_CLUSTER_NAME }} --resource-group ${{ env.RESOURCE_GROUP }} --file - | base64)" >> $GITHUB_ENV

      - name: Deploy ingress controller
        uses: wahyd4/kubectl-helm-action@master
        env:
          KUBE_CONFIG_DATA: ${{ env.KUBE_CONFIG_DATA }}
        with:
          args: |
            helm repo add ingress-nginx https://kubernetes.github.io/ingress-nginx
            helm repo add jetstack https://charts.jetstack.io
            helm repo update
            kubectl create namespace nginx-ingress
            helm install nginx-ingress ingress-nginx/ingress-nginx \
              --namespace nginx-ingress \
              --set controller.replicaCount=2 \
              --set controller.nodeSelector."beta\.kubernetes\.io/os"=linux \
              --set defaultBackend.nodeSelector."beta\.kubernetes\.io/os"=linux \
              --set controller.admissionWebhooks.patch.nodeSelector."beta\.kubernetes\.io/os"=linux \
              --set controller.service.loadBalancerIP=${PUBLIC_IP_ADDRESS} \
              --set controller.service.annotations."service\.beta\.kubernetes\.io/azure-dns-label-name"="sentia"
            kubectl label namespace nginx-ingress cert-manager.io/disable-validation=true
            helm install \
              cert-manager \
              --namespace nginx-ingress \
              --version v0.16.1 \
              --set installCRDs=true \
              --set nodeSelector."beta\.kubernetes\.io/os"=linux \
              jetstack/cert-manager
            kubectl apply -f k8s/cluster-issuer.yaml